#!/bin/bash

# Launch Flux within a SCREEN session

declare -r prog=${0##*/}

declare -r path_screen="/usr/bin/screen"

declare vg_opts="--tool=memcheck --leak-check=full -v"
declare gdb_opts="-ex run --args"

declare attach_rank=
declare run_rank=
declare shutdown=

declare cmd_wrapper=
declare cmd_prefix=

declare cmbd_opts="--logdest=cmbd.log"
declare cmbd_size=
declare cmbd_sid="screen"
declare cmbd_kary=
declare cmbd_modules="modctl,api,barrier,live,log,kvs,job,rexec,resrc,sched[0]"
declare cmbd_modopts="\
  sched:rdl-conf=conf/hype.lua\
  kvs:conf.log.reduction-timeout-msec=100\
  kvs:conf.log.circular-buffer-entries=100000\
  kvs:conf.log.persist-level=debug"

declare -r path_getopt="/usr/bin/getopt"
declare -r short_opts="hN:gVs:M:O:k:Xa:r:SL"
declare -r long_opts="\
help,nnodes:,gdb,valgrind,sid:,module:,modopt:,k-ary:,noexec,attach:,run:,\
shutdown,list"

declare -r usage="\
Usage: $prog OPTIONS [command [args...]]\n\
   -N,--nnodes N               set size of session\n\
   -g,--gdb                    run cmbd processes under gdb\n\
   -V,--valgrind               run cmbd processes under valgrind\n\
   -s,--sid NAME               set session name\n\
   -M,--module NAME            load additional module\n\
   -O,--modopt NAME:var=val    set additional module option\n\
   -k,--k-ary N                set reduction tree fanout\n\
   -X,--noexec                 print command lines without running them
   -a,--attach N               attach to rank N
   -r,--run N                  run command with FLUX_TMPDIR set for rank N
   -L,--list                   list sessions
   -S,--shutdown               shutdown session"

usage()    { echo -e "$usage" >&2; }
log_msg()  { echo -e "$prog: $@";  }
die()      { log_msg "Fatal: $@"; exit 1; }

pidcheck() {
    local sid=$1
    local oldpid=$(cat ${FLUX_TMPDIR:-${TMPDIR:-/tmp}}/flux-${sid}-0/cmbd.pid 2>/dev/null)
    if test -n "$oldpid" && kill -0 $oldpid 2>/dev/null; then
        die "rank 0 of session ${sid} is still running"
    fi
}


GETOPT=$($path_getopt -o $short_opts -l $long_opts -n $prog -- $@)
if [ $? != 0 ]; then
    usage
    exit 1
fi
eval set -- "$GETOPT"
while true; do
    case $1 in
        -h|--help)       usage; exit 0                               ;;
        -g|--gdb)        cmd_prefix="gdb ${gdb_opts}";       shift 1 ;;
        -V|--valgrind)   cmd_prefix="valgrind ${vg_opts}";   shift 1 ;;
        -N|--nnodes)     cmbd_size=$2;                       shift 2 ;;
        -s|--sid)        cmbd_sid=$2;                        shift 2 ;;
        -M|--module)     cmbd_modules="${cmbd_modules},$2";  shift 2 ;;
        -O|--modopt)     cmbd_modopts="${cmbd_modopts} $2";  shift 2 ;;
        -k|--k-ary)      cmbd_kary=$2;                       shift 2 ;;
        -X|--noexec)     cmd_wrapper=echo;                   shift 1 ;;
        -a|--attach)     attach_rank=$2;                     shift 2 ;;
        -r|--run)        run_rank=$2;                        shift 2 ;;
        -S|--shutdown)   shutdown=1;                         shift 1 ;;
        -L|--list)       listscreens=1;                      shift 1 ;;
        --)              shift; break                                ;;
        *)               usage; exit 1                               ;;
    esac
done
# leftover arguments are assumed to be --command to execute
ARGS=( ${@:$OPTIND} )
if test ${#ARGS[@]} -eq 0; then
    set ""
else
    set "${ARGS[@]}"
fi

# find invalid argument combinations
if test -z "$cmbd_size" -a -z "$attach_rank" -a -z "$shutdown"\
                        -a -z "$run_rank" -a -z "$listscreens"; then
    usage; exit 1
fi
if test -n "$1" && test -n "$attach_rank" -o -n "$shutdown" \
                                          -o -n "$listscreens"; then
    usage; exit 1
fi
if test -z "$1" && test -n "$run_rank"; then
    usage; exit 1
fi

# take care of the arguments that don't invovle starting a session
if test -n "$attach_rank"; then
    exec screen -S ${cmbd_sid} -p${attach_rank} -r
elif test -n "$shutdown"; then
    log_msg "telling session \"${cmbd_sid}\" to exit"
    exec screen -S ${cmbd_sid} -X quit
elif test -n "$listscreens"; then
    exec screen -list
elif test -n "$run_rank"; then
    export FLUX_TMPDIR=${FLUX_TMPDIR:-${TMPDIR:-/tmp}}/flux-${cmbd_sid}-${run_rank}
    exec "$@"
fi    

#test -n "$cmd_wrapper" || set -x

$cmd_wrapper pidcheck ${cmbd_sid}

$cmd_wrapper ulimit -c unlimited

$cmd_wrapper $path_screen -d -m -S ${cmbd_sid} \
    || die "failed to run screen"
# keep zombie windows
$cmd_wrapper $path_screen -S ${cmbd_sid} -X zombie kr

for rank in `seq 0 $(($cmbd_size - 1))`; do
    if test $rank -eq 0; then
        screen_exec_opts="-p 0 -X exec"
    else
        screen_exec_opts="-X screen"
    fi
    $cmd_wrapper $path_screen -S ${cmbd_sid} ${screen_exec_opts} \
        ${cmd_prefix} ./cmbd ${cmbd_opts} \
        --rank ${rank} \
        --size ${cmbd_size} \
        ${cmbd_sid:+--sid=${cmbd_sid}} \
        ${cmbd_kary:+--k-ary=${cmbd_kary}} \
        ${cmbd_modules:+--plugins=${cmbd_modules}} \
        ${@:+--command=\"$@\"} \
        ${cmbd_modopts}
done

# vi:tabstop=4 shiftwidth=4 expandtab
